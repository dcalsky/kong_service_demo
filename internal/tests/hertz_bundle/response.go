package hertz_bundle

import (
	"bytes"

	"github.com/cloudwego/hertz/pkg/protocol"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// ResponseRecorder is an implementation of http.ResponseWriter that records its mutations for later inspection in tests.
type ResponseRecorder struct {
	Code        int
	header      *protocol.ResponseHeader
	Body        *bytes.Buffer
	Flushed     bool
	result      *protocol.Response // cache of Result's return value
	wroteHeader bool
}

func NewRecorder() *ResponseRecorder {
	return &ResponseRecorder{
		header: new(protocol.ResponseHeader),
		Body:   new(bytes.Buffer),
		Code:   consts.StatusOK,
	}
}

func (rw *ResponseRecorder) Header() *protocol.ResponseHeader {
	m := rw.header
	if m == nil {
		m = new(protocol.ResponseHeader)
		rw.header = m
	}
	return m
}

// Write implements http.ResponseWriter. The data in buf is written to
// rw.Body, if not nil.
func (rw *ResponseRecorder) Write(buf []byte) (int, error) {
	if !rw.wroteHeader {
		rw.WriteHeader(consts.StatusOK)
	}
	if rw.Body != nil {
		rw.Body.Write(buf)
	}
	return len(buf), nil
}

func (rw *ResponseRecorder) WriteHeader(code int) {
	if rw.wroteHeader {
		return
	}
	if rw.header == nil {
		rw.header = new(protocol.ResponseHeader)
	}
	rw.header.SetStatusCode(code)
	rw.Code = code
	rw.wroteHeader = true
}

func (rw *ResponseRecorder) Flush() {
	if !rw.wroteHeader {
		rw.WriteHeader(consts.StatusOK)
	}
	rw.Flushed = true
}

// Result returns the response generated by the handler.
func (rw *ResponseRecorder) Result() *protocol.Response {
	if rw.result != nil {
		return rw.result
	}

	res := new(protocol.Response)
	h := rw.Header()
	h.CopyTo(&res.Header)
	if rw.Body != nil {
		b := rw.Body.Bytes()
		res.SetBody(b)
		res.Header.SetContentLength(len(b))
	}

	rw.result = res
	return res
}
