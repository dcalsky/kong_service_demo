// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dcalsky/kong_service_demo/internal/adapter/repo (interfaces: IAccountRepo)
//
// Generated by this command:
//
//	mockgen -package repo --build_flags=--mod=mod --destination account_mock.go . IAccountRepo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	entity "github.com/dcalsky/kong_service_demo/internal/model/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIAccountRepo is a mock of IAccountRepo interface.
type MockIAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepoMockRecorder
}

// MockIAccountRepoMockRecorder is the mock recorder for MockIAccountRepo.
type MockIAccountRepoMockRecorder struct {
	mock *MockIAccountRepo
}

// NewMockIAccountRepo creates a new mock instance.
func NewMockIAccountRepo(ctrl *gomock.Controller) *MockIAccountRepo {
	mock := &MockIAccountRepo{ctrl: ctrl}
	mock.recorder = &MockIAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountRepo) EXPECT() *MockIAccountRepoMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockIAccountRepo) CreateAccount(arg0 context.Context, arg1 *entity.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockIAccountRepoMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockIAccountRepo)(nil).CreateAccount), arg0, arg1)
}

// DescribeAccountByEmail mocks base method.
func (m *MockIAccountRepo) DescribeAccountByEmail(arg0 context.Context, arg1 string) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountByEmail", arg0, arg1)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountByEmail indicates an expected call of DescribeAccountByEmail.
func (mr *MockIAccountRepoMockRecorder) DescribeAccountByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountByEmail", reflect.TypeOf((*MockIAccountRepo)(nil).DescribeAccountByEmail), arg0, arg1)
}

// DescribeAccountById mocks base method.
func (m *MockIAccountRepo) DescribeAccountById(arg0 context.Context, arg1 entity.AccountId) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountById", arg0, arg1)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountById indicates an expected call of DescribeAccountById.
func (mr *MockIAccountRepoMockRecorder) DescribeAccountById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountById", reflect.TypeOf((*MockIAccountRepo)(nil).DescribeAccountById), arg0, arg1)
}

// IsAccountInOrganization mocks base method.
func (m *MockIAccountRepo) IsAccountInOrganization(arg0 context.Context, arg1 entity.AccountId, arg2 entity.OrganizationId) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountInOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAccountInOrganization indicates an expected call of IsAccountInOrganization.
func (mr *MockIAccountRepoMockRecorder) IsAccountInOrganization(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountInOrganization", reflect.TypeOf((*MockIAccountRepo)(nil).IsAccountInOrganization), arg0, arg1, arg2)
}

// ListAccounts mocks base method.
func (m *MockIAccountRepo) ListAccounts(arg0 context.Context, arg1 ListAccountsRequest) ([]entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].([]entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockIAccountRepoMockRecorder) ListAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockIAccountRepo)(nil).ListAccounts), arg0, arg1)
}
