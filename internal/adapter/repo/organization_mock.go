// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dcalsky/kong_service_demo/internal/adapter/repo (interfaces: IOrganizationRepo)
//
// Generated by this command:
//
//	mockgen -package repo --build_flags=--mod=mod --destination organization_mock.go . IOrganizationRepo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	entity "github.com/dcalsky/kong_service_demo/internal/model/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIOrganizationRepo is a mock of IOrganizationRepo interface.
type MockIOrganizationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIOrganizationRepoMockRecorder
}

// MockIOrganizationRepoMockRecorder is the mock recorder for MockIOrganizationRepo.
type MockIOrganizationRepoMockRecorder struct {
	mock *MockIOrganizationRepo
}

// NewMockIOrganizationRepo creates a new mock instance.
func NewMockIOrganizationRepo(ctrl *gomock.Controller) *MockIOrganizationRepo {
	mock := &MockIOrganizationRepo{ctrl: ctrl}
	mock.recorder = &MockIOrganizationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrganizationRepo) EXPECT() *MockIOrganizationRepoMockRecorder {
	return m.recorder
}

// AddAccountToOrganization mocks base method.
func (m *MockIOrganizationRepo) AddAccountToOrganization(arg0 context.Context, arg1 entity.AccountId, arg2 entity.OrganizationId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountToOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountToOrganization indicates an expected call of AddAccountToOrganization.
func (mr *MockIOrganizationRepoMockRecorder) AddAccountToOrganization(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountToOrganization", reflect.TypeOf((*MockIOrganizationRepo)(nil).AddAccountToOrganization), arg0, arg1, arg2)
}

// CreateOrganization mocks base method.
func (m *MockIOrganizationRepo) CreateOrganization(arg0 context.Context, arg1 *entity.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockIOrganizationRepoMockRecorder) CreateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockIOrganizationRepo)(nil).CreateOrganization), arg0, arg1)
}

// DescribeOrganizationById mocks base method.
func (m *MockIOrganizationRepo) DescribeOrganizationById(arg0 context.Context, arg1 entity.OrganizationId) (*entity.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationById", arg0, arg1)
	ret0, _ := ret[0].(*entity.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationById indicates an expected call of DescribeOrganizationById.
func (mr *MockIOrganizationRepoMockRecorder) DescribeOrganizationById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationById", reflect.TypeOf((*MockIOrganizationRepo)(nil).DescribeOrganizationById), arg0, arg1)
}

// ListOrganizationMembers mocks base method.
func (m *MockIOrganizationRepo) ListOrganizationMembers(arg0 context.Context, arg1 entity.OrganizationId) []entity.AccountId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationMembers", arg0, arg1)
	ret0, _ := ret[0].([]entity.AccountId)
	return ret0
}

// ListOrganizationMembers indicates an expected call of ListOrganizationMembers.
func (mr *MockIOrganizationRepoMockRecorder) ListOrganizationMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationMembers", reflect.TypeOf((*MockIOrganizationRepo)(nil).ListOrganizationMembers), arg0, arg1)
}

// RemoveAccountFromOrganization mocks base method.
func (m *MockIOrganizationRepo) RemoveAccountFromOrganization(arg0 context.Context, arg1 entity.AccountId, arg2 entity.OrganizationId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountFromOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountFromOrganization indicates an expected call of RemoveAccountFromOrganization.
func (mr *MockIOrganizationRepoMockRecorder) RemoveAccountFromOrganization(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountFromOrganization", reflect.TypeOf((*MockIOrganizationRepo)(nil).RemoveAccountFromOrganization), arg0, arg1, arg2)
}
