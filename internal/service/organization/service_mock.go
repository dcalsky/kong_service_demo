// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dcalsky/kong_service_demo/internal/service/organization (interfaces: IOrganizationService)
//
// Generated by this command:
//
//	mockgen -package organization --build_flags=--mod=mod --destination service_mock.go . IOrganizationService
//

// Package organization is a generated GoMock package.
package organization

import (
	context "context"
	reflect "reflect"

	base "github.com/dcalsky/kong_service_demo/internal/base"
	dto "github.com/dcalsky/kong_service_demo/internal/model/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIOrganizationService is a mock of IOrganizationService interface.
type MockIOrganizationService struct {
	ctrl     *gomock.Controller
	recorder *MockIOrganizationServiceMockRecorder
}

// MockIOrganizationServiceMockRecorder is the mock recorder for MockIOrganizationService.
type MockIOrganizationServiceMockRecorder struct {
	mock *MockIOrganizationService
}

// NewMockIOrganizationService creates a new mock instance.
func NewMockIOrganizationService(ctrl *gomock.Controller) *MockIOrganizationService {
	mock := &MockIOrganizationService{ctrl: ctrl}
	mock.recorder = &MockIOrganizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrganizationService) EXPECT() *MockIOrganizationServiceMockRecorder {
	return m.recorder
}

// AddAccountToOrganization mocks base method.
func (m *MockIOrganizationService) AddAccountToOrganization(arg0 context.Context, arg1 base.KongArgs, arg2 dto.JoinOrganizationRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAccountToOrganization", arg0, arg1, arg2)
}

// AddAccountToOrganization indicates an expected call of AddAccountToOrganization.
func (mr *MockIOrganizationServiceMockRecorder) AddAccountToOrganization(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountToOrganization", reflect.TypeOf((*MockIOrganizationService)(nil).AddAccountToOrganization), arg0, arg1, arg2)
}

// CreateOrganization mocks base method.
func (m *MockIOrganizationService) CreateOrganization(arg0 context.Context, arg1 base.KongArgs, arg2 dto.CreateOrganizationRequest) dto.CreateOrganizationResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].(dto.CreateOrganizationResponse)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockIOrganizationServiceMockRecorder) CreateOrganization(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockIOrganizationService)(nil).CreateOrganization), arg0, arg1, arg2)
}

// DescribeOrganization mocks base method.
func (m *MockIOrganizationService) DescribeOrganization(arg0 context.Context, arg1 base.KongArgs, arg2 dto.DescribeOrganizationRequest) dto.DescribeOrganizationResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].(dto.DescribeOrganizationResponse)
	return ret0
}

// DescribeOrganization indicates an expected call of DescribeOrganization.
func (mr *MockIOrganizationServiceMockRecorder) DescribeOrganization(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganization", reflect.TypeOf((*MockIOrganizationService)(nil).DescribeOrganization), arg0, arg1, arg2)
}

// RemoveAccountFromOrganization mocks base method.
func (m *MockIOrganizationService) RemoveAccountFromOrganization(arg0 context.Context, arg1 base.KongArgs, arg2 dto.QuitOrganizationRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveAccountFromOrganization", arg0, arg1, arg2)
}

// RemoveAccountFromOrganization indicates an expected call of RemoveAccountFromOrganization.
func (mr *MockIOrganizationServiceMockRecorder) RemoveAccountFromOrganization(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountFromOrganization", reflect.TypeOf((*MockIOrganizationService)(nil).RemoveAccountFromOrganization), arg0, arg1, arg2)
}
